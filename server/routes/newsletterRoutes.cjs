const express = require('express');
const router = express.Router();
const NewsletterService = require('../newsletterService.cjs');

// RÃ©cupÃ©rer tous les abonnÃ©s
router.get('/', async (req, res) => {
  try {
    console.log('ðŸ“§ RÃ©cupÃ©ration de tous les abonnÃ©s Ã  la newsletter');
    
    const result = await NewsletterService.getAllSubscribers();
    
    if (result.success) {
      res.json(result);
    } else {
      res.status(400).json(result);
    }
    
  } catch (error) {
    console.error('Erreur dans la route GET /newsletter:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur serveur lors de la rÃ©cupÃ©ration des abonnÃ©s' 
    });
  }
});

// Ajouter un nouvel abonnÃ©
router.post('/', async (req, res) => {
  try {
    const { email, nom, prenom, source } = req.body;
    
    console.log('ðŸ“§ Ajout d\'un nouvel abonnÃ©:', { email, nom, prenom, source });
    
    if (!email) {
      return res.status(400).json({
        success: false,
        error: 'Email requis'
      });
    }
    
    const result = await NewsletterService.addSubscriber(email, nom, prenom, source);
    
    if (result.success) {
      res.json(result);
    } else {
      res.status(400).json(result);
    }
    
  } catch (error) {
    console.error('Erreur dans la route POST /newsletter:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur serveur lors de l\'ajout de l\'abonnÃ©' 
    });
  }
});

// Mettre Ã  jour le statut d'un abonnÃ©
router.put('/:id/status', async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;
    
    console.log(`ðŸ“§ Mise Ã  jour du statut de l'abonnÃ© ${id}:`, status);
    
    if (!status) {
      return res.status(400).json({
        success: false,
        error: 'Statut requis'
      });
    }
    
    const result = await NewsletterService.updateSubscriberStatus(id, status);
    
    if (result.success) {
      res.json(result);
    } else {
      res.status(400).json(result);
    }
    
  } catch (error) {
    console.error('Erreur dans la route PUT /newsletter/:id/status:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur serveur lors de la mise Ã  jour du statut' 
    });
  }
});

// Supprimer un abonnÃ©
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    console.log(`ðŸ“§ Suppression de l'abonnÃ© ${id}`);
    
    const result = await NewsletterService.deleteSubscriber(id);
    
    if (result.success) {
      res.json(result);
    } else {
      res.status(400).json(result);
    }
    
  } catch (error) {
    console.error('Erreur dans la route DELETE /newsletter/:id:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur serveur lors de la suppression de l\'abonnÃ©' 
    });
  }
});

// RÃ©cupÃ©rer les statistiques
router.get('/stats', async (req, res) => {
  try {
    console.log('ðŸ“Š RÃ©cupÃ©ration des statistiques de la newsletter');
    
    const result = await NewsletterService.getStats();
    
    if (result.success) {
      res.json(result);
    } else {
      res.status(400).json(result);
    }
    
  } catch (error) {
    console.error('Erreur dans la route GET /newsletter/stats:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur serveur lors de la rÃ©cupÃ©ration des statistiques' 
    });
  }
});

// Exporter les abonnÃ©s actifs
router.get('/export/active', async (req, res) => {
  try {
    console.log('ðŸ“¥ Export des abonnÃ©s actifs');
    
    const result = await NewsletterService.getActiveSubscribers();
    
    if (result.success) {
      res.json(result);
    } else {
      res.status(400).json(result);
    }
    
  } catch (error) {
    console.error('Erreur dans la route GET /newsletter/export/active:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erreur serveur lors de l\'export des abonnÃ©s actifs' 
    });
  }
});

module.exports = router; 